import random
import os
import json
from datetime import datetime
from selenium.webdriver.remote.webdriver import WebElement
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException
from datetime import datetime, timedelta
import time
import re
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from selenium.webdriver.chrome.options import Options
import pytz
from utils import logger


file_name_result = f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ú–ê–†–ú4 ({datetime.now().strftime('%Y%m%d_%H%M%S')}).txt"
logger_app = logger.get_logger(file_name_result)

CONNECTION_TIMEOUT = 40
auth_url = "https://marm.nalog.gov.ru:9085/auth/"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∏—Å—å–º–∞
sender_email = "smtp_user@stm-labs.ru"
sender_password = "COgNF6FR"
receiver_email = ["kotyukovvv@rambler.ru"]
receiver_email_string = ", ".join(receiver_email)
subject = f"{'üîµ' if not logger.COUNTER_ERROR else 'üî¥'} –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ú–ê–†–ú4"


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def send_email(sender_email, sender_password, receiver_email, subject, file_name):
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = MIMEMultipart()
    message["From"] = sender_email
    message["Bcc"] = receiver_email
    message["Subject"] = subject

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
    message.attach(MIMEText("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏."))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    with open(file_name, "rb") as file:
        attachment = MIMEApplication(file.read())
    attachment.add_header("Content-Disposition", "attachment", filename=file_name)
    message.attach(attachment)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    with smtplib.SMTP_SSL("smtp.lancloud.ru", 465) as server:
        server.login(sender_email, sender_password)
        server.send_message(message)


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ json
def get_page_data_from_files(folder_path):
    page_data = []

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
    files = os.listdir(folder_path)

    # –ß—Ç–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    for file_name in files:
        file_path = os.path.join(folder_path, file_name)
        if os.path.isfile(file_path) and file_name.endswith(".json"):
            with open(file_path, "r", encoding="utf-8") as file:  # —É–∫–∞–∑–∞–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ utf-8
                json_data = json.load(file)
                page_data.append(json_data)

    return page_data

# —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
def navigate_to_auth_page(driver, logger_app):
    auth_form_locator = (By.XPATH, '//*[@id="root"]/div/div[1]/main/div/form')
    try:
        driver.get(auth_url)
        waiter = WebDriverWait(driver, timeout=10)
        auth_form = waiter.until(EC.presence_of_element_located(auth_form_locator))
        auth_form.find_element(By.ID, "login").send_keys("dev")
        auth_form.find_element(By.ID, "password").send_keys("8zq8=JRxOC$/Qe+")
        auth_form.find_element(By.XPATH, "//button[@type='submit']").click()
        time.sleep(3)
        logger_app.info("–§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞", mark=True)
    except TimeoutException:
        logger_app.error(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ù–ï –û–°–£–©–ï–°–¢–í–õ–ï–ù, –ü–†–û–í–ï–†–¨–¢–ï –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–¨ –ú–ê–†–ú-4", mark=True)
        logger_app.error("–§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ú–ê–†–ú-4", mark=True)

def navigate_and_check_element(driver, page_data, logger_app):
    url = page_data[0].get("url")
    page_name = page_data[0].get("page_name")
    elements = page_data[0].get("elements")
    logger_app.info(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_name}:\n")

    driver.get(url)

    for element in elements:
        locator_type, locator_value = element.get("locator").split("#", 1)
        name = element.get("name")

        try:
            if locator_type == "id":
                locator = (By.ID, locator_value)
            elif locator_type == "xpath":
                locator = (By.XPATH, locator_value)
            elif locator_type == "css_selector":
                locator = (By.CSS_SELECTOR, locator_value)
            elif locator_type == "class_name":
                locator = (By.CLASS_NAME, locator_value)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ª–æ–∫–∞—Ç–æ—Ä–∞: {locator_type}")

            element_element = WebDriverWait(driver, 45).until(
                EC.visibility_of_element_located(locator)
            )

            logger_app.info(f"–≠–ª–µ–º–µ–Ω—Ç '{name}' –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '{page_name}' –≤–∏–¥–∏–º.", mark=True)

        except NoSuchElementException:
            logger_app.error(f"–≠–ª–µ–º–µ–Ω—Ç '{name}' –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '{page_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", mark=True)

        except TimeoutException:
            logger_app.error(f"–≠–ª–µ–º–µ–Ω—Ç '{name}' –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '{page_name}' –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è.", mark=True)

        except ValueError as e:
            logger_app.error(str(e))



if __name__ == "__main__":
    folder_path = "pages_and_element"
    pages = get_page_data_from_files(folder_path)

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ MIMEMultipart
    msg = MIMEMultipart()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    moscow_tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(moscow_tz)
    date_time = now.strftime("%d/%m/%Y %H:%M:%S")

    # –õ–æ–≥–≥–µ—Ä
    file_name_result = f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ú–ê–†–ú4 {date_time} (–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è).txt"
    logger_app = logger.get_logger(file_name_result)

    # –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
    options = webdriver.ChromeOptions()
    driver = webdriver.Chrome(options=options)

    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    navigate_to_auth_page(driver, logger_app)

    # –ü—Ä–æ—Ö–æ–¥ –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
    for page in pages:
        navigate_and_check_element(driver, page, logger_app)

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    driver.quit()

    # –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö
    logger_app.info(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {logger.COUNTER_FULL}.")
    logger_app.info(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {logger.COUNTER_SUCCESS}.", mark=True, counter=False)
    logger_app.error(f"–ü—Ä–æ–≤–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {logger.COUNTER_ERROR}.", mark=True, counter=False)




